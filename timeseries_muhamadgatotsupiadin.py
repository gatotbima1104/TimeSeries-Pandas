# -*- coding: utf-8 -*-
"""TimeSeries-MuhamadGatotSupiadin

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IDKiCAYYVefXEYjuWllGCZP2DjvH3072

# **Muhamad Gatot Supiadin**
## M183X0343 | M01 - Pengembangan Machine Learning dan Front End Web
## Universitas Amikom Yogyakarta , Sleman Yogyakarta

## **Time Series-(Gold)**
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM, Bidirectional, Dropout
import matplotlib.pyplot as plt
import tensorflow as tf

df = pd.read_csv('gold.csv')
df

df.shape

df.isnull().sum()

cols = [0,1]
df = df[df.columns[cols]]
df

df.info()

"""**Making Plot**"""

dates = df['Date'].values
prices  = df['Open'].values
 
 
plt.figure(figsize=(20,5))
plt.plot(dates, prices)
plt.title('Price average',
          fontsize=20);

"""**Converting Data**"""

from sklearn.preprocessing import MinMaxScaler
prices = prices.reshape(-1, 1)

mm_scaler = MinMaxScaler()
scaled_prices = mm_scaler.fit_transform(prices)
scaled_prices = scaled_prices.reshape(1, -1)
scaled_prices = np.hstack(scaled_prices)
scaled_prices

"""**Splitting Dataset**"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(dates, 
                                                    scaled_prices, 
                                                    test_size=0.2, 
                                                    random_state=1, 
                                                    shuffle=False)

print(len(X_train), len(X_test))

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

def model_forecast(model, series, window_size):
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size))
    ds = ds.batch(32).prefetch(1)
    forecast = model.predict(ds)
    return forecast

train_set = windowed_dataset(y_train, window_size=64,
                             batch_size=200,
                             shuffle_buffer=1000)

val_set = windowed_dataset(y_test, window_size=64,
                           batch_size=200,
                           shuffle_buffer=1000)

model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(60, return_sequences=True),
    tf.keras.layers.LSTM(60),
    tf.keras.layers.Dense(30, activation='relu'),
    tf.keras.layers.Dense(10, activation='relu'),
    tf.keras.layers.Dense(1)
])

scale = (max(scaled_prices) - min(scaled_prices)) * 0.1
print(scale)

"""**Making Callbacks**"""

class CallbackTS(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< scale) and (logs.get('val_mae') < scale):
      self.model.stop_training = True
      print('\nFor Epoch', epoch, ' training has been stopped.''\n Because MAE of the model has reach < 10% of data scale')
callbacks = CallbackTS()

"""**Train Model**"""

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(train_set,
                    epochs=100,
                    validation_data=val_set, 
                    callbacks=[callbacks])

"""**Mae plot visualisation**"""

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Model Accuracy')
plt.ylabel('Mae')
plt.xlabel('epochs')
plt.legend(['Train', 'Val'], loc='upper right')
plt.show()

"""**Loss plot Visualisation**"""

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epochs')
plt.legend(['Train', 'Val'], loc='upper right')
plt.show()